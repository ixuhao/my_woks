" vundle
set nocompatible
filetype off 
"source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"behave mswin

set rtp+=~/.vim/bundle/vundle/
call vundle#begin()
Plugin 'gmarik/vundle'
Plugin 'tpope/vim-fugitive'
Plugin 'asins/vimcdoc'
Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab'

Plugin 'scrooloose/syntastic'

" zen coding
Plugin 'vim-scripts/Emmet.vim'
Plugin 'jmcantrell/vim-virtualenv'
"Bundle 'Rykka/riv.vim'
"Bundle 'vim-scripts/pep8'
Plugin 'vim-scripts/jpythonfold.vim'

Plugin 'fatih/vim-go'
let g:go_fmt_command = "goimports"
let g:go_fmt_autofmt = 1

au FileType go nmap <Leader>i <Plug>(go-import)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap gd <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

Bundle 'majutsushi/tagbar'
nmap <F12> :TagbarToggle<CR>

"Syntax
Plugin 'pangloss/vim-javascript'
" React JSX
Plugin 'mxw/vim-jsx'
"Bundle 'jelera/vim-javascript-syntax'
Plugin 'digitaltoad/vim-jade'
"Bundle 'mattn/emmet-vim'

" Colorschemes
"Bundle 'altercation/vim-colors-solarized'

" Completion
" Bundle 'ahayman/vim-nodejs-complete'

"Bundle 'MarcWeber/vim-addon-mw-utils'
"Bundle 'tomtom/tlib_vim'
"Bundle 'garbas/vim-snipmate'
"Bundle 'honza/vim-snippets'
"node general - gf
"Bundle 'moll/vim-node'

"node snippets; dump this to vim-snippets
" Bundle 'jamescarr/snipmate-nodejs'

"Bundle 'jpythonfold'
"Bundle 'pep8'
"Bundle 'pyflakes-vim'
"Bundle 'vimpy'

Plugin 'tpope/vim-surround'
Plugin 'jiangmiao/auto-pairs'

"note
"Plugin 'xolox/vim-misc'
"Plugin 'xolox/vim-notes'

" octopress
" Bundle 'tangledhelix/vim-octopress'
call vundle#end()
filetype plugin indent on
syntax on
"autocmd BufNewFile,BufRead *.markdown,*.textile,*.md set filetype=octopress

set nobackup
set showcmd
set noswf
set hlsearch
set autoindent
set cindent
set wildmenu


if version >= 603
    set helplang=cn
endif

" set nu
set formatoptions+=mM
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoread
set wmh=0
set nrformats=hex
set laststatus=2 "always show statusline
set completeopt=menuone,longest,preview


map <Leader>cd :cd %:p:h<CR>
map ;; :%s:::g<Left><Left><Left>
map ;' :%s:::cg<Left><Left><Left><Left>
map <C-K> <C-W>k<C-W>_
map <C-J> <C-W>j<C-W>_

colorscheme evening
"autocmd BufNewFile *.py 0r ~/.vim/skeleton.py
"autocmd BufWritePre,FileWritePre *.py ks|call LastMod()|'s

"fun LastMod()
"  if line("$") > 20
"    let l = 20
"  else
"    let l = line("$")
"  endif
"  exe "1," . l . "g/Last modified: /s/Last modified: .*/Last modified: " .
"  \ strftime("%Y %b %d %X")
"endfun

function! CurDir()
  let curdir = substitute(getcwd(), '/Users/haoxu/', "~/", "g")
  return curdir
endfunction

set statusline=%<%f%h%m%r\ [%{CurDir()}]\ [%{fugitive#statusline()}]%=\ 0x%B\ %b\ %Y\ %{&ff}\ %{&enc}\ %{&fenc}\ %l\/\%L,%c%V\ %P
set laststatus=2 "always show statusline

"call pathogen#infect()
au FileType vim,javascript,html setl shiftwidth=2
au FileType vim,javascript,html setl tabstop=2
au FileType javascript call JavaScriptFold()

" jsx
let g:jsx_ext_required=0
